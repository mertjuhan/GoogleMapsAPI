@*
    For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@
@{
}
<style>
    #map {
        height: 400px; /* The height is 400 pixels */
        width: 100%; /* The width is the width of the web page */
    }</style>

<div class="row m-2">
    <h3>My Google Maps Demo</h3>
    <div class="col-9 d-flex justify-content-center mt-3 mb-3">

        <input type="text" id="pac-input" class="form-control" />
    </div>
    <div class="col-3">

        <button class="btn btn-outline-primary mt-3 mb-3" asp-controller="Home" asp-action="MyAction1" onclick="search()" style="width:100%" ;>

            Ara
        </button>

    </div>
   
</div>

<!--The div element for the map -->
<div id="map" class="m-2"></div>
<script async src="https://maps.googleapis.com/maps/api/js?key=AIzaSyBiKU9nPa7vCW_SKcJ4xOCsXba2bNrbWiA&libraries=places&callback=initMap"></script>
<div id="getdiv">
</div>



<script>
    // Initialize and add the map
    

  async   function initMap() {
       
        // The location of Uluru
        const uluru = { lat: 38.5220608, lng: 27.0401536 };
        // The map, centered at Uluru
        var map = new google.maps.Map(document.getElementById("map"), {
            zoom: 10,
            center: uluru,
            mapTypeId: google.maps.MapTypeId.HYBRID,
            labels:true,
            
        });
        // The marker, positioned at Uluru
        const marker = new google.maps.Marker({
            position: uluru,
            map: map,
            
        });


    }
    
     function  search() {
        

        
        var dizi = [];


        infowindow = new google.maps.InfoWindow();
        map = new google.maps.Map(document.getElementById("map"), {

            zoom: 10,
            mapTypeId: google.maps.MapTypeId.HYBRID,
            labels: true,
        });

        const request = {
            query: document.getElementById("pac-input").value,
            fields: ["name", "geometry"],
        };

        service = new google.maps.places.PlacesService(map);
        service.textSearch(request, function (results, status) {
            if (status === google.maps.places.PlacesServiceStatus.OK) {
                for (var i = 0; i < results.length; i++) {
                    createMarker(results[i]);
                    dizi.push(results[i])

                }
                
                map.setCenter(results[0].geometry.location);


                var prod = []
                var path = []

                

                
                
                //for (var i = 0; i < dizi.length; i++) {
                   
                //    var obje = {
                //        lat: dizi[i].geometry.location.lat(), lng: dizi[i].geometry.location.lng(),
                //    }
                //    path.push(obje);
                    
                //}


                //if (dizi.length > 1) {

                //   var datass = displayPathElevation(dizi);
          
                 
                           
                //}
                //else 
                // {
        
                //  var datasss =  displayLocationElevation(path, elevator);
                    
                // }
                    
                for (var i = 0; i < dizi.length; i++) {
                   

                    var datas = dizi[i]
                  
                    var lat = dizi[i].geometry.location.lat(); 
                    var lng = dizi[i].geometry.location.lng();
                
                    
                    var mod = {
                        FormattedAddress: datas.formatted_address,
                        Name: datas.name,
                        PlaceId: datas.place_id,
                        Geometry: {
                            Location: {
                                Lat: lat,
                                Lng: lng
                            }
                        }
                    }
                    prod.push(mod)
                    
                }

                var project = { "model ": dizi }
                $.ajax({
                    type: "POST",
                    url:"/Home/MyAction",
                    dataType: "html",
                    //contentType: "application/json;charset=utf-8",
                    data: { model: prod },
                    success: function (response) {
                        //console.log(response)
                        $("#getdiv").html(response)
                    }
                });

            }

        });
       
    }

    function createMarker(place) {
        console.log(place)
     
        if (!place.geometry || !place.geometry.location) return;
        
        const marker = new google.maps.Marker({
            map,
            position: place.geometry.location,
            
        });

        google.maps.event.addListener(marker, "click", () => {
            const contentString =
                '<div id="content">' +
                '<div id="siteNotice">' +
                "</div>" +
                '<h5 id="firstHeading" class="firstHeading">'+place.name+'</h5>' +
                '<div id="bodyContent">' +
                "<p><strong>" + place.formatted_address + "</strong></p>"
                "</div>" +
                "</div>";
            infowindow.setContent(contentString || "");
            infowindow.open({
                anchor: marker,
                map,
            });
        });
    }

    function displayLocationElevation(path, elevator) {
        var elevationlar = []
        elevator
            .getElevationForLocations({
                locations: path,
            })
            .then(({ results }) => {
                //console.log(results[0].elevation)
                elevationlar.push(results[0].elevation)
                //console.log(elevationlar)

                for (var i = 0; i < elevationlar.length; i++) {
                    console.log(elevationlar[i])
                }
            });   
        
    }

   function displayPathElevation(dizi) {

        const elevator = new google.maps.ElevationService();

        var path = []
        var datasss = []
    // Koordinat Path'i doldurma.

        for (var i = 0; i < dizi.length; i++) {

            var obje = {
                lat: dizi[i].geometry.location.lat(), lng: dizi[i].geometry.location.lng(),
            }
            path.push(obje);

        }
       ////////////////////
       var vvv = [];
        var asd = elevator
            .getElevationAlongPath({
                path: path,
                samples: dizi.length
            }).then(({ results }) => {

                for (var i = 0; i < dizi.length; i++)
                    {
                    vvv.push(results[i])
                    
                    }
                });
            return vvv; 
    }

   

</script>

   